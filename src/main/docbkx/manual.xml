<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>KajukModules</title>
        <subtitle>User's Guide</subtitle>
        <author>
            <personname>
                <firstname>Martin</firstname>
                <surname>Homuth</surname>
            </personname>
            <email>martin.homuth@staff.hu-berlin.de</email>
        </author>
        <author>
            <orgname xml:id="snp_org3"> Technische Universit채t Berlin </orgname>
        </author>
        <copyright>
            <year>2013</year>
            <holder> INRIA, SFB 632 Information Structure / D1 Linguistic Database,
                Humboldt-Universit채t zu Berlin, Universit채t Potsdam, All rights reserved. </holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view in the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains an importer for the Kasseler Junktionskorpus, see
            http://www.uni-giessen.de/kajuk/. With this importer the corpus can be mapped to Salt
            and processed further.</para>
        <para>The import of the corpus utilizes a mapping to Salt with the use of a SAX-parser. The
            mapping itself includes the conversion from the corpus annotations to a ANNIS-usable
            token-based setting, which will be explained further in the following chapter.</para>
        
                
        
        
        
        
    </chapter>
    <chapter>
        <title>Corpus Properties</title>
        <para>The KAJUK corpus is segmented into phrases or between conjunctions, thus the text is
            tokenized using the Salt implementation of the TreeTagger tokenizer, a small example of
            the tokenization process can be found below. </para>
        <para>The annotations of the KAJUK corpus are realized in nested SGML tags, which are not
            adoptable to Salt, hence a key-value representation of those elements is
            necessary.</para>
        <section>
            <title>Conversion Procedure</title>
            <para>Originally the corpus was available in a SGML format specifically developed for
                the KAJUK corpus and hence not convertible with existing tools of the Pepper
                framework. With this basis the following tasks needed to be done for a
                conversion.</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>Transform the SGML format into a XML conform format for further
                            processing</para>
                    </listitem>
                    <listitem>
                        <para>Tokenization of the KAJUK text.</para>
                    </listitem>
                    <listitem>
                        <para>Development of a Pepper module for the mapping of the KAJUK corpus to
                            Salt, which leads to inherent exportability to relANNIS, the relational
                            format of ANNIS) and thereby the ability to map the corpus to a
                            sustainable format.</para>
                    </listitem>
                </orderedlist>
            </para>
            <section>
                <title>Format Transformation </title>
                <para>The conversion from the SGML format to real XML is a straight forward process
                    and requires just a few annotation changes, but without these changes no
                    standardized processing can be performed.</para>
            </section>
            <section>
                <title>Tokenization</title>
                <para>ANNIS is token-based (whereas a token can be a word, a sentence or a syllable)
                    and the KAJUK corpus is originally segmented into phrases. With a simple mapping
                    to ANNIS it is not possible to search for words. Therefore the text has to be
                    tokenized with a tokenizer and while the Pepper framework includes an
                    implementation of the TreeTagger tokenizer it is used for this project. </para>
                <para>Let's show a simple example for tokenizing the
                    corpus:<programlisting>1  &lt;line n="1">
2  			&lt;lb>
3  				&lt;VOR>Im Jahr 1640 umb das Neue Jahr da&lt;/VOR>
4  				&lt;praed>
5  					&lt;V ID="Fin">&lt;VV>kamen&lt;/VV>&lt;/V>
6  				&lt;/praed> in das darmst채dische Land &lt;subj>eine Armate schwedisch
7  			Volk.&lt;/subj>&lt;/lb>&lt;newline>&lt;/newline>
8  		&lt;/line></programlisting></para>
                <para>When tokenizing the above text, the elements are ignored and tokens for the
                    non-elements are created. Accordingly following tokens would be
                    created:<programlisting>TOK1 = Im
TOK2 = Jahr
TOK3 = 1640
TOK4 = umb
TOK5 = ...</programlisting></para>
                <para>In a later processing step, these tokens receive annotations, as will be shown
                    in section 2.1.3.</para>
                <para>However, there are special cases as in the following
                    example:<programlisting>&lt;line n="18"/>
&lt;lb type="subj" n="30">
    &lt;SUB IR="zero">dass&lt;/SUB>
    in ihm
    &lt;subj>das &lt;!--hier line-->unersch&amp;uml;tterte Vertrauen auf jenes principium
        und das ruhige &lt;!--hier line 19-->Dasitzen des in ihm Befangenen&lt;/subj>
    &lt;praed>&lt;Phras>seinen erhabensten Ausdruck&lt;/Phras>&lt;/praed>
    &lt;praed>&lt;V ID="PII">&lt;PV>&lt;!--hier line 20-->bekommen&lt;/PV>&lt;/V>&lt;/praed>
    &lt;praed>&lt;V ID="Fin">&lt;HV>habe,&lt;/HV>&lt;/V>&lt;/praed>&lt;/lb>
&lt;line n="21"></programlisting></para>
                <para>In this example two comments are inserted into the continuous text.
                    (&lt;!--hier line 19--> and &lt;!--hier line 20-->) With the tokenization those
                    comments need to be considered as a span-annotation which mark graphical line
                    breaks in the original text. The same appears for page breaks in some
                    cases.</para>
                <para>However, there is a problem with this kind of annotation. As mentioned, there
                    are two ways of representing a graphical line break. As in the example above,
                    there are two &lt;line> elements and three comments, whereas one comment does
                    not show the actual line. There are two ways of interpreting a &lt;line> element
                    and a line break comment. Either they mean that the actual break happens at that
                    position and the mentioned line starts there, or the mentioned line ends there.
                    There are examples, where it is not clear which one it is as well as the
                    situation that it is clear, but the meaning alternates. </para>
                <para>The processing of the text is not possible with this inconsistency, therefore
                    some modifications to the text need to be made. For representing graphical line
                    breaks, the original elements as well as the comments need to be replaced with a
                    consistent model. The solution are two new elements added to the text
                    (&lt;newline/> and &lt;newpage/>). </para>
            </section>
            <section>
                <title>Conversion Module</title>
                <para>In ANNIS linguistic annotations are represented in attribute-value pairs. In
                    ANNIS it is not possible to use nested annotations in terms of multiple
                    consecutive annotations.
                    <programlisting>1 &lt;praed>&lt;V ID="Fin">&lt;MV>must&lt;/MV>&lt;/V>&lt;/praed></programlisting></para>
                <para>Such annotation need to be mapped to attribute-value pairs in which nested
                    values can be represented. The solution for that is a variety of key-value pairs
                        <emphasis>attached</emphasis> to the
                    tokens:<programlisting>1  ID = "Fin"
2  pos_KAJUK = "MV"
3  satzglied = "praed"
4  satzglied_type = "V"</programlisting></para>
                <para>These key-value pairs are then connected with the token
                        <emphasis>must</emphasis>, hence this token can be found via search queries
                    that look for any of the pairs, e.g. a query for all tokens with the pair
                        <emphasis>ID="Fin"</emphasis> returns amongst others the token
                        <emphasis>must</emphasis>. A complete list of element to key-value
                    conversion can be found below.</para>
                <para>Another speciality of KAJUK is that the same informations can be found in the
                    XML-hierarchy in different places.
                    <programlisting>1 &lt;J IR="adv">&lt;AP type="FOK">aber&lt;/AP>&lt;/J>
2 &lt;FOK>aber&lt;/FOK></programlisting></para>
                <para>In this example the information that the word "aber" is a focusparticle "FOK"
                    is realised by an attribute as well as an element. This is also needed to be
                    considered in the mapping process. Furthermore the attribute "type=" represents
                    very different informations along the corpus. </para>
                <table frame="box" width="656">
                    <caption>Conversiontable</caption>
                    <col width="159px"/>
                    <col width="190px"/>
                    <col width="135px"/>
                    <col width="178px"/>
                    <thead>
                        <tr>
                            <th>Annotation</th>
                            <th>Key-Value Pair</th>
                            <th>Annotation</th>
                            <th>Key-Value Pair</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>&lt;!--hier line--></td>
                            <td>line="n"</td>
                            <td>&lt;KON></td>
                            <td>J_type="KON"</td>
                        </tr>
                        <tr>
                            <td>&lt;newpage></td>
                            <td>page="n"</td>
                            <td>&lt;SUB></td>
                            <td>J_type="SUB"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb></td>
                            <td>lb="lb"</td>
                            <td>&lt;J></td>
                            <td>J="J"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="kom"></td>
                            <td>IR_lb="kom"</td>
                            <td>&lt;J norm="x"></td>
                            <td>norm="x"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="kond"></td>
                            <td>IR_lb="kond"</td>
                            <td>&lt;V ID="x"></td>
                            <td>pos_ID="x"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb type="subjattr"></td>
                            <td>type="subattr"</td>
                            <td>&lt;FOK></td>
                            <td>pos_KAJUK="FOK"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb type="subj"></td>
                            <td>type="subj"</td>
                            <td>type="FOK"</td>
                            <td>pos_KAJUK="FOK"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb type="WR"></td>
                            <td>type="WR"</td>
                            <td>&lt;FV></td>
                            <td>pos_KAJUK="FV"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb ADDtype="WR"></td>
                            <td>ADDtype="WR"</td>
                            <td>&lt;HMV></td>
                            <td>pos_KAJUK="HMV"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="fin"></td>
                            <td>IR="fin"</td>
                            <td>&lt;HV></td>
                            <td>pos_KAJUK="HV"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="kaus"></td>
                            <td>IR="kaus"</td>
                            <td>&lt;Inf></td>
                            <td>pos_KAJUK="Inf"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="temp"></td>
                            <td>IR="temp"</td>
                            <td>&lt;IP></td>
                            <td>pos_KAJUK="IP"</td>
                        </tr>
                        <tr>
                            <td>&lt;lb IR="meta"></td>
                            <td>IR="meta"</td>
                            <td>&lt;KOR></td>
                            <td>pos_KAJUK="KOR"</td>
                        </tr>
                        <tr>
                            <td>&lt;J ADDIR="x"></td>
                            <td>ADDIR="x"</td>
                            <td>type="KOR"</td>
                            <td>pos_KAJUK="KOR"</td>
                        </tr>
                        <tr>
                            <td>&lt;J EB="prag"></td>
                            <td>EB="prag"</td>
                            <td>&lt;KV></td>
                            <td>pos_KAJUK="KV"</td>
                        </tr>
                        <tr>
                            <td>&lt;subj type="noE"></td>
                            <td>type="noE"</td>
                            <td>&lt;LASSEN></td>
                            <td>pos_KAJUK="LASSEN"</td>
                        </tr>
                        <tr>
                            <td>&lt;J ID="3"></td>
                            <td>ID="3"</td>
                            <td>&lt;MV></td>
                            <td>pos_KAJUK="MV"</td>
                        </tr>
                        <tr>
                            <td>&lt;J IR="x"></td>
                            <td>IR="x"</td>
                            <td>&lt;RF></td>
                            <td>pos_KAJUK="RF"</td>
                        </tr>
                        <tr>
                            <td>&lt;AD></td>
                            <td>J_type="AD"</td>
                            <td>&lt;TUN></td>
                            <td>pos_KAJUK="TUN"</td>
                        </tr>
                        <tr>
                            <td>&lt;AP></td>
                            <td>J_type="AP"</td>
                            <td>&lt;VP></td>
                            <td>pos_KAJUK="VP"</td>
                        </tr>
                        <tr>
                            <td>&lt;praed real="afin"></td>
                            <td>real="afin"</td>
                            <td>&lt;VV></td>
                            <td>pos_KAJUK="VV"</td>
                        </tr>
                        <tr>
                            <td>&lt;subj type="abs"></td>
                            <td>satzglied_type="abs"</td>
                            <td>&lt;J type="x"></td>
                            <td>X="x"</td>
                        </tr>
                        <tr>
                            <td>&lt;AcI></td>
                            <td>satzglied_type="Acl"</td>
                            <td>&lt;AP ADDtype="x"></td>
                            <td>X="x"</td>
                        </tr>
                        <tr>
                            <td>&lt;ADJGr></td>
                            <td>satzglied_type="ADJGr"</td>
                            <td>&lt;XX></td>
                            <td>X="XX"</td>
                        </tr>
                        <tr>
                            <td>&lt;akk></td>
                            <td>satzglied_type="akk"</td>
                            <td>&lt;praed dir="R"></td>
                            <td>dir_E="R"</td>
                        </tr>
                        <tr>
                            <td>&lt;NGr></td>
                            <td>satzglied_type="NGr"</td>
                            <td>&lt;subj type="E"></td>
                            <td>E="E"</td>
                        </tr>
                        <tr>
                            <td>&lt;obl></td>
                            <td>satzglied_type="obl"</td>
                            <td>&lt;SUB IR="zero"></td>
                            <td>IR_E="zero"</td>
                        </tr>
                        <tr>
                            <td>&lt;PGr></td>
                            <td>satzglied_type="PGr"</td>
                            <td>&lt;J type="E"></td>
                            <td>J_E="J"</td>
                        </tr>
                        <tr>
                            <td>&lt;Phras></td>
                            <td>satzglied_type="Phras"</td>
                            <td>&lt;SUB ADDtype="E"></td>
                            <td>J_type_E="SUB"</td>
                        </tr>
                        <tr>
                            <td>&lt;prae></td>
                            <td>satzglied_type="prae"</td>
                            <td>&lt;obj change="gen-nom"></td>
                            <td>change="gen-nom"</td>
                        </tr>
                        <tr>
                            <td>&lt;PV></td>
                            <td>satzglied_type="PV"</td>
                            <td>&lt;obl></td>
                            <td>satzglied_type="obl"</td>
                        </tr>
                        <tr>
                            <td>&lt;ADV></td>
                            <td>satzglied="ADV"</td>
                            <td>&lt;AD></td>
                            <td>J_type="AD"</td>
                        </tr>
                        <tr>
                            <td>&lt;obj></td>
                            <td>satzglied="obj"</td>
                            <td>&lt;praed real="afin"></td>
                            <td>real="afin"</td>
                        </tr>
                        <tr>
                            <td>&lt;SUB type="subj"></td>
                            <td>satzglied="subj"</td>
                            <td>&lt;praed norm="und"></td>
                            <td>norm="und"</td>
                        </tr>
                        <tr>
                            <td>&lt;SUB ADDtype="Eviol"></td>
                            <td>viol="Eviol"</td>
                            <td>&lt;TUN></td>
                            <td>satzglied_type="TUN"</td>
                        </tr>
                        <tr>
                            <td>&lt;VOR></td>
                            <td>Vorfeld="VOR"</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        </section>
        <section>
            <title>Ellipsis</title>
            <para>An example for an ellipsis can be seen in the following
                listing.<programlisting>1  &lt;lb n="1,3000,2000">
2      &lt;subj type="E" dir="V" change="indef-def,MF-VF">der Hertzog von Weinmar&lt;/subj>
3  	&lt;praed>
4      	&lt;V ID="Fin">&lt;KV>War&lt;/KV>&lt;/V>
5      &lt;/praed>&lt;newline>&lt;/newline>
6  	&lt;J IR="adv">
7 		&lt;AP>aber&lt;/AP>
8  	&lt;/J>
9  	&lt;praed>
10 		&lt;V ID="PII">&lt;VV>gestorben&lt;/VV>&lt;/V>
11 	&lt;/praed>
12 &lt;/lb></programlisting></para>
            <para>The example shows the ellipsis <emphasis>der Hertzog von Weinmar</emphasis>, which
                is not part of the main text but in the process of conversion treated as normal
                text. Simply the created key-value pairs for the ellipsis do make them special.  </para>
            <para>The ellipsis of the corpus are identified by specific attributes of elements and
                as a result, because of the decision of keeping the elliptic text in the main text,
                the token annotations receive the extension "_E" (see table above) as well as the
                special annotation <emphasis>E="E"</emphasis>. With this every ellipsis can be
                identified with its context in Salt as well as in ANNIS.</para>
        </section>
        <section>
            <title>Junctions</title>
            <para>Junctions are identified by housenumbers in the actual format. With this phrases
                are combined into &lt;lb> elements, so-called "Sachverhaltsdarstellungen". Phrases
                that belong to the same junctionbond receive the same housenumber. The correspondend
                sentential connective, which combines both phrases to such a bond, is contained in
                both phrases. This relationship is the core of the corpus and has to be converted
                into ANNIS. </para>
            <para>For this the tokens are combined into one unit (the spans), which itself can be
                annotated with the housenumbers they receive. The relation between phrases can be
                realised in Salt and ANNIS using the concept of pointing relations. With pointing
                relations phrases can be connected and then be further annotated, e.g. with the kind
                of the sentential connective like 'KON'. </para>
            <para>In the end the junctions are realised with spans for each &lt;lb> element, which
                are connected via pointing relations for each house number. In doing so the
                connections are placed consecutive with the appearance of house numbers. For example
                the spans with the housenumber &lt;lb n="1003"> are connected cocnsecutively, which
                means the first appearance is connected to the second and the second to the third.
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Module Usage</title>
        <para>Because the importer is implemented in a static way, there are no customization
            options. Every document of the corpus will be parsed and mapped to Salt. Then the
            created Salt representation can be used for further processing.</para>
    </chapter>
    <chapter>
        <title>Implementation Details</title>
        <para>
            This chapter covers the details of the importer implementation to create the Salt
                mapping for exporting the corpus to the RelANNIS format.
        </para>
        <section>
            <title>The characters() method</title>
            <para>In the characters() method, the parsed characters array is appended to the
                STextualDS of the DocumentGraph while the involved part is tokenized with the Salt
                implementation of the TreeTagger. The created STokens are then added to the SLayers
                for the different categories, e.g. <emphasis>junktionen</emphasis> or
                    <emphasis>lexikalische_annotationen</emphasis>. <note>
                    <para>These layers weren't used in the laudatio project, the actual RelANNIS
                        files were configured by hand, so the Salt equivalent for the RelANNIS
                        exporter is not implemented yet.</para>
                </note> Those layers are used for grouping in the ANNIS webinterface. In the end,
                every SToken's reference is saved for every element opened to create a SSpan later
                on.</para>
            <para>Additionally, modifications for elliptic annotations are done here.</para>
        </section>
        <section>
            <title>The startElement() method</title>
            <para>When a new element is openend, several things are done:<orderedlist>
                    <listitem>
                        <para>Skipping <emphasis>pb</emphasis>- and
                            <emphasis>line</emphasis>-elements completely</para>
                    </listitem>
                    <listitem>
                        <para>Determine multi-level <emphasis>lb</emphasis>-elements</para>
                    </listitem>
                    <listitem>
                        <para>Creating SSpans for <emphasis>newline</emphasis>- and
                                <emphasis>newpage</emphasis>-elements</para>
                    </listitem>
                    <listitem>
                        <para>The key-value pair(s) for the opened element and it's attributes is
                            created, see chapter 2.1.3. The conversion class created for this
                            purpose simply defines the SAnnotation accordingly</para>
                    </listitem>
                    <listitem>
                        <para>The information about the opened element is saved</para>
                    </listitem>
                </orderedlist></para>
        </section>
        <section>
            <title>The endElement() method</title>
            <para>As with the <emphasis>startElement()</emphasis> there are several things to do here:<orderedlist>
                    <listitem>
                        <para>Skipping <emphasis>pb</emphasis>- and
                            <emphasis>line</emphasis>-elements completely</para>
                    </listitem>
                    <listitem>
                        <para>If the element is a <emphasis>newline</emphasis>- or
                                <emphasis>newpage</emphasis>-element, the information is
                            saved</para>
                    </listitem>
                    <listitem>
                        <para>A SSpan for each saved STokens within this element is created as well
                            as it's annotation</para>
                    </listitem>
                    <listitem>
                        <para>For every house number the closed element may contain, a SSpan is
                            created and saved for later use</para>
                    </listitem>
                    <listitem>
                        <para>The STokens and SSpans created are connected with
                            SSpanningRelations</para>
                    </listitem>
                </orderedlist></para>
        </section>
        <section>
            <title>The endDocument() method</title>
            <para>When the document is parsed, the importer connects the SSpans of the same house
                number with each other with the use of SSpanningRelations. This connection happens
                in a FIFO fashion, so each SSpan points to the next occurance of the same house
                number and so on. Additionally hypotaxis and parataxis are marked with the letters
                    <emphasis>a</emphasis> and <emphasis>b</emphasis> in the house number. In this
                case the last occurance of a house number (main sentence) points to every occurance
                of the house number with the addition.</para>
        </section>
        <section>
            <title>Missing features</title>
            <para>There are some things, that are not covered by the importer module, but had to be
                manipulated by hand for the Laudatio integration:<orderedlist>
                    <listitem>
                        <para>The metadata of the documents is not part of the importer itself,
                            instead there is a separate file with the information</para>
                    </listitem>
                    <listitem>
                        <para>The grouping in ANNIS is not done with the created SLayers, but by
                            hand. </para>
                    </listitem>
                </orderedlist></para>
        </section>
    </chapter>
</book>
