<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>KAJUKodules</title>
        <subtitle>User's Guide</subtitle>
        <author>
            <personname>
                <firstname>Martin</firstname>
                <surname>Homuth</surname>
            </personname>
                <email>martin.homuth@staff.hu-berlin.de</email>
        </author>
        <author>
            <orgname xml:id="snp_org3"> Technische Universität Berlin </orgname>
        </author>
        
        <copyright>
            <year>2013</year>
            <holder>
                INRIA, 
                SFB 632 Information Structure / D1 Linguistic Database, 
                Humboldt-Universität zu Berlin, 
                Universität Potsdam, 
                All rights reserved.
            </holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view in the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains an importer for the Kasseler Junktionskorpus, see
                <link>http://www.uni-giessen.de/kajuk/</link>. The format  </para>
        <title xml:id="paula_importer_name">KAJUKImporter</title>
        <para> We are sorry for being unable to give a documentation of the PAULAImporter. This
            documentation will be subject of future versions. </para>
        <!--
        <sect1>
            <title>Mapping to Salt</title>
            <para>To represent this model in Salt we mapped the time based event concept to the
                token concept of Salt. A general difference between both models is the handling of
                primary texts. PAULA, does not care about primary texts, because of the event
                based concept. Therefore it is necessary to define one or more tiers to contain the
                primary text resource in the EXB model when mapping the data to Salt. This is done
                via an entry in the property file needed by the PAULAImporter (see
                “salt.Token“). The values of each Event objects contained in the marked Tier object
                will be concatenated and mapped to a primary text (STextualDS object). If there are
                two or more Tier objects marked, each will be mapped to a separate primary text.
                Next to this each Event object contained in this Tier object will also be mapped to
                a SToken object. A Timeline object of PAULA will be mapped to the STimeline
                object of Salt. Each SToken object will refer to the range (via SPointOfTime
                objects) of time inside the STimeline object. After mapping, the range of time of a
                SToken object is the same as for the corresponding Event object. Event objects not
                part of the marked Tier object will be mapped to a SSpan object. The value of the
                Event object will be mapped to an SAnnotation object with Event.value →
                SAnnotation.sValue and Tier.categoryName → SAnnotation.sName. The project-name of
                the PAULA document will be mapped to the SName of the corresponding SDocument
                object. To have a more user-defined way for mappings you can use the properties
                described in the section “Property file“.</para>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="importer_prop_overview"/> contains an overview of all
                usable properties to customize the behaviour of this pepper module. The following
                section contains a close description to each single property and describes the
                resulting differences in the mapping to the salt model.</para>
            <table xml:id="importer_prop_overview" frame="all">
                <title>properties to customize importer behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="prop_prop1" endterm="importer_prop1_title"/></entry>
                            <entry>Tier.categoryName</entry>
                            <entry>optional</entry>
                            <entry>- -</entry>
                        </row>                       
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="prop_prop1">
                <title xml:id="importer_prop1_title">salt.token</title>
                <para>With the property <property>salt.token</property> you can mark the Tier object
                    which shall be interpreted as the one containing the tokenization and the
                    primary text.</para>
                <para><code>salt.token=Tier.categoryName</code></para>
                <para>Imagine the example of <xref linkend="primaryData_exm"/>, there we have a Tier
                    object with categorical name txt displayed as X[txt]. <figure xml:id="primaryData_exm">
                        <title>primary data in PAULA</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="src/main/docbkx/images/text_sample.jpg"/>
                            </imageobject>
                        </mediaobject>
                    </figure> This Tier object contains the data representing the primary text. To
                    map them in correct way to Salt, you need to set the property “salt.token”: </para>
                <para><code>salt.token=txt</code></para>
            </sect2>
        </sect1>
        -->
    </chapter>
    <chapter xml:id="paula_exporter">
        <title xml:id="paula_exporter_name">PAULAExporter</title>
        <sect1>
            <title>Mapping to Salt</title>
            <para>The PAULAExporter , like the PAULAImporter, may have a 
            property file which is described more precisely in the next 
            section. 
            After reading the property file, the PAULAExporter invokes 
            the mapping to PAULA XML files.
            </para>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="exorter_prop_overview"/> 
                contains an overview of all usable properties to 
                customize the behaviour of this pepper module. 
                The following section contains a close description to 
                each single property and describes the resulting 
                differences in the mapping to the salt model.</para>
            <table xml:id="exorter_prop_overview" frame="all">
                <title>properties to customize exporter behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <colspec colnum="1" colname="c1" colwidth="4.45*"/>
                    <colspec colnum="2" colname="c2" colwidth="1.85*"/>
                    <colspec colnum="3" colname="c3" colwidth="1.94*"/>
                    <colspec colnum="4" colname="c4" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="exprop_prop1" endterm="exporter_prop1_title"/></entry>
                            <entry>yes|no</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>                       
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="exprop_prop1">
                <title xml:id="exporter_prop1_title">paulaExporter.validateOutput</title>
                <para>The PAULAExporter supports the validation of the output files against the PAULA DTDs  
                    by parsing the created PAULA documents.
                    To enable this function, the property file needs to have a property	
                    "paulaExporter.validateOutput" with the value "yes".</para>
                <para>
                    <code>paulaExporter.validateOutput=yes</code>
                </para>
            </sect2>
        </sect1>
        <sect1>
			<title>Mapping description</title>
			<para> When exporting a corpus structure given in the Salt model in first step, the PAULAExporter
                creates subdirectories for each <classname>SCorpus</classname> and
                    <classname>SDocument</classname> object representing the corpus hierarchy. The
                outputted folder structure then follows the form
                    <emphasis>corpusName/subCorpusName/documentName</emphasis> as shown in <xref
                    linkend="exporter_corpus_structure_mapping"/>. </para>
			<figure xml:id="exporter_corpus_structure_mapping">
				<title>Mapping of corpus structure</title>
				<mediaobject>
					<imageobject>
					    <imagedata align="center" scalefit="1" width="100%" fileref="images/sample-CorpusGraphMapping.jpg"/>
					</imageobject>
					<textobject>
						<phrase>Mapping of corpus structure</phrase>
					</textobject>
				</mediaobject>
			</figure>
			<para> In the second step, the PAULAExporter creates the PAULA files from the given Salt-model by
                mapping the textual datasources (<classname>STextualDS</classname>) and the layers
                    (<classname>SLayer</classname>) including the token
                    (<classname>SToken</classname>), spans (<classname>SSpan</classname>),
                structures (<classname>SStructure</classname>), pointing relations
                    (<classname>SPointingRelation</classname>) and the annotations
                    (<classname>SAnnotation</classname>) to PAULA format and saving the files in the
                document path. The next step is to create the annotation set file which links all
                previously created files. For this file an annotation file is generated that describes 
                which annotation layer can be found in which set. Finally, all media files are copied into
                the target directory and the PAULA DTDs are created. The following sections describe
                the specific mapping steps more precisely. </para>
		</sect1>
		<sect1>
			<title>Mapping of Datasources</title>
			<para> All existing textual data sources, which does not belong to a layer, are mapped to files
                with names following the form <emphasis>documentName.text.xml</emphasis> or
                    <emphasis>documentName.text.dataSourceNo.xml</emphasis> when there is more than
                one data source (No stands for the number of the current
                    <classname>STextualDS</classname> object). The PAULAExporter supports textual
                data sources being in a layer which leads to a different example filename-schema
                (the filenames get a prefix “layerName.”) for all textual data sources in a layer. 
			</para>
			<para> All data source files are compliant with the <emphasis>paula_text.dtd</emphasis>. The
                created data source files are organized as shown in <xref linkend="exporter_textFile"/>, 
			    where only the part embedded in <markup>&lt;body&gt;</markup> tags and the 
			    <markup>@paula_id</markup> are variable. 
			    The <markup>@paula_id</markup> equals the filename without the file-ending, by convention. 
			    Imagine a <classname>STextualDS</classname> object as shown in 
			    <xref linkend="exporter_STextualDSObject"/>.
			</para>
			<para>
			<figure xml:id="exporter_STextualDSObject">
				<title>The STextualDS object</title>
				<mediaobject>
					<imageobject>
					    <imagedata align="center" scalefit="1" width="50%" fileref="images/text_sample.jpg"/>
                    </imageobject>
				</mediaobject>
			</figure>
			</para>
			<para>
			Then, <xref linkend="exporter_textFile"/> is the output of the mapping.
			</para>
			<para>
			<example xml:id="exporter_textFile">
				<title>doc1.text.xml</title>
				<programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?> 
<!DOCTYPE paula SYSTEM "paula_text.dtd"> 
<paula version="0.9"> 
	<header paula_id="doc1.text" type="text"/> 
	<body> 
     	Is this example more complicated than it appears to be? 
	</body> 
</paula>
]]>
				</programlisting>
			</example>
			</para>
		</sect1>
		<sect1>
			<title>Token Files</title>
            <para>
                <xref linkend="exporter_token"/> shows a simplified Salt model of some 
                <classname>SToken</classname> objects referencing the 
                <classname>STextualDS</classname> object.</para>
		    <para>
		        <figure xml:id="exporter_token">
		            <title>Excerpt of the model of the tokenization</title>
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" scalefit="1" width="50%" fileref="images/samplesToken.jpg"/>
                        </imageobject>
		            </mediaobject>
		        </figure>
		    </para>
		    <para> The PAULAExporter transforms the <classname>SToken</classname> objects into a file
                which conforms to the <emphasis>paula_mark.dtd</emphasis> and contains <emphasis>markables</emphasis>
                which would look like <xref linkend="exporter_tokenFile"/> in this case. </para>
		    <para>
		        <example xml:id="exporter_tokenFile">
		            <title>morphology.doc1.tok.xml</title>
		            <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?> 
<!DOCTYPE paula SYSTEM "paula_mark.dtd"> 
<paula version="0.9"> 
<header paula_id="morphology.doc1.tok"/> 
   <markList xmlns:xlink="http://www.w3.org/1999/xlink" 
                        type="tok" xml:base="doc1.text.xml" >
	   <mark id="sTok1" xlink:href="#xpointer(
	                   string-range(//body,'',1,2))" /> 
       <mark id="sTok2" xlink:href="#xpointer(
                        string-range(//body,'',4,4))" /> 
       ...
       <mark id="sTok9" xlink:href="#xpointer(
                        string-range(//body,'',50,2))" /> 
       <mark id="sTok10" xlink:href="#xpointer(
                        string-range(//body,'',53,2))" /> 
   </markList> 
</paula> 
]]>
				</programlisting>
		        </example>
		    </para>
		    <para>
		        Each <markup>&lt;mark&gt;</markup> tag resembles a portion of the text which is 
		        referenced by the <markup>@base</markup> and a string range in the body of the text PAULA file.
		        The <markup>@type</markup> attribute in the <markup>&lt;markList&gt;</markup> tag states that 
		        all <markup>&lt;mark&gt;</markup> entries are token.
		    </para>
		</sect1>
        <sect1>
            <title>Span Files</title>
            <para> 
                <classname>SSpan</classname> objects are aggregations of <classname>SToken</classname> and 
                are mapped to <emphasis>markeables</emphasis> in the PAULA format. 
                <xref linkend="exporter_spanFile"/> shows some mapped <classname>SSpan</classname> object 
                from the model in <xref linkend="exporter_span"/> , namely a span file, which is 
                compliant with <emphasis>paula_mark.dtd</emphasis>. 
            </para>
            <para>
                <figure xml:id="exporter_span">
                    <title>Two <classname>SSpan</classname> objects aggregating some <classname>SToken</classname> objects</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata align="center" scalefit="1" width="50%" fileref="images/samplesSpan.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para> For span files, the <markup>&lt;markList&gt;</markup> contains the attribute
                <markup>@type</markup> with the value mark which states that the mark entries are spans. Also, the
                <markup>@base</markup> attribute references the main token file of which token are referenced. </para>
            <para>
                <example xml:id="exporter_spanFile">
                    <title>nolayer.doc1.mark.xml</title>
                    <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?> 
<!DOCTYPE paula SYSTEM "paula_mark.dtd"> 
<paula version="0.9"> 
   <header paula_id="nolayer.doc1.mark"/> 
	<markList xmlns:xlink="http://www.w3.org/1999/xlink" 
	               type="mark" xml:base="morphology.doc1.tok.xml" > 
        <mark id="sSpan1" xlink:href="(#sTok1)"/> 
        ...
        <mark id="sSpan3" xlink:href="(#sTok2,#sTok3)"/> 
        </markList> 
</paula> 
]]>
				</programlisting>
                </example>
            </para>
            <para> A span file references one token file but can reference token from several files. If a
                span references a token which is not in the base token file, the token reference gets a prefix
                (the containing token file). For example, if <emphasis>sTok1</emphasis> is not
                contained in <emphasis>morphology.doc1.tok.xml</emphasis> (e.g. if it is not in a
                layer), the first <markup>&lt;mark&gt;</markup> tag would be </para>
            <para>
                <code>
                    <![CDATA[
<mark id=”sSpan1” xlink:href=”(nolayer.doc1.tok.xml#sTok1)”/>.
                    ]]>
                </code>
            </para>
            <para> More information about the mapping of layers may be found at the end of this
                documentation. </para>
        </sect1>
        <sect1>
            <title>Structure Files</title>
            <para> Structure files contain a set of <markup>&lt;struct&gt;</markup> tags, each
                containing a set of <markup>&lt;rel&gt;</markup> tags which represent relations
                referencing tokens, spans or structures. 
                The mapping of <classname>SStructure</classname> objects to a structure file which 
                is compliant to <emphasis>paula_struct.dtd</emphasis> is shown in 
                <xref linkend="exporter_structFile"/> which is a mapping of the model in 
                <xref linkend="exporter_struct"/>. 
            </para>
            <para>
                <figure xml:id="exporter_struct">
                    <title>Model of the syntax layer</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata align="center" scalefit="1" width="50%" fileref="images/samplesStruct.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para> 
                As you can see, <classname>SStructure</classname> objects can overlap 
                <classname>SSpan</classname> objects, <classname>SStructure</classname> objects
                and <classname>SToken</classname> objects.
                Thus, the <markup>&lt;rel&gt;</markup> tag may contain a reference to a structure in
                the <markup>@base</markup> <emphasis role="bold">null</emphasis> which means that the
                    <markup>&lt;struct&gt;</markup> which is referenced is located in the same file.
                Due to multiple possible targets of a <classname>SStructure</classname> object, 
                declaring a base file does not make much sense. 
            </para>
            <para>
                <example xml:id="exporter_structFile">
                    <title>syntax.doc1.struct.xml</title>
                    <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?>
<!DOCTYPE paula SYSTEM "paula_struct.dtd">
<paula version="0.9">
	<header paula_id="syntax.doc1.struct"/>
	<structList xmlns:xlink="http://www.w3.org/1999/xlink" type="struct">
		<struct id="structure1">
			<rel id="sDomRel1" xlink:href="morphology.doc1.tok.xml#sTok1"/>
			<rel id="sDomRel2" xlink:href="null#structure2"/>
			<rel id="sDomRel5" xlink:href="null#structure3"/>
		</struct>
		<struct id="structure2">
			<rel id="sDomRel3" xlink:href="morphology.doc1.tok.xml#sTok2"/>
			<rel id="sDomRel4" xlink:href="morphology.doc1.tok.xml#sTok3"/>
		</struct>
	</structList>
</paula>
]]>
				</programlisting>
                </example>
            </para>
        </sect1>
        <sect1>
            <title>Pointing Relation Files</title>
            <para>
                Pointing relation files contain all pointing relations of one layer
                and are conform to the <emphasis>paula_rel.dtd</emphasis>.
                Usually, they do not refer to a base file.
            </para>
            <para>
                Consider the model containing a <classname>SPointingRelation</classname> object 
                from a <classname>SToken</classname> to a <classname>SSpan</classname> as
                shown in <xref linkend="exporter_pointRel"/>.
            </para>
            <para>
                <figure xml:id="exporter_pointRel">
                    <title>A 
                        <classname>SPointingRelation</classname> having a 
                        <classname>SSToken</classname> as source and a 
                        <classname>SSpan</classname> as target
                    </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata align="center" scalefit="1" width="50%" fileref="images/samplesPointRel.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                The corresponding pointing relation file to the model would look like the file
                shown in <xref linkend="exporter_pointRelFile"/>.
            </para>
            <para>
                <example xml:id="exporter_pointRelFile">
                    <title>nolayer.doc1.pointRel_anaphoric.xml</title>
                    <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?>
<!DOCTYPE paula SYSTEM "paula_rel.dtd">
<paula version="0.9">
	<header paula_id="nolayer.doc1.pointRel_anaphoric"/>
	<relList xmlns:xlink="http://www.w3.org/1999/xlink" type="anaphoric">
		<rel	id="sPointingRel1" xlink:href="morphology.doc1.tok.xml#sTok7" 
				target="nolayer.doc1.mark.xml#sSpan3"/>
	</relList>
</paula>
]]>
				</programlisting>
                </example>
            </para>
            <para>
                As you can see, the <markup>&lt;rel&gt;</markup> tag has a <markup>@xlink</markup> which is the
                reference to the source of the pointing relation and a <markup>@target</markup> attribute defining
                the target of the pointing relation. 
            </para>
        </sect1>
        <sect1>
            <title>Mapping of the Annotation Set</title>
            <para>
                The annotation set is a grouping of the document structure and the PAULA file
                is compliant to <emphasis>paula_struct.dtd</emphasis>.
                This grouping contains the information about all layers used for the linguistic
                data in the Salt model.
                The model could look like the one in <xref linkend="exporter_annoSet"/>.
            </para>
            <para>
                <figure xml:id="exporter_annoSet">
                    <title>The annotation set model</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata scalefit="1" width="100%" fileref="images/samplesAnnoSet.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                The annotation set file is a file which contains all created PAULA files and is 
                segmented into layers which are the mapping of the <classname>SLayer</classname> objects.
                The following frames show an example annotation set file (<emphasis>doc1.anno.xml</emphasis>, 
                <xref linkend="exporter_annoSetFile"/>) and an annotation feat file 
                (<emphasis>doc1.anno_feat.xml</emphasis>, <xref linkend="exporter_annoFeatFile"/>) .
            </para>
            <para>
                <example xml:id="exporter_annoSetFile">
                    <title>doc1.anno.xml</title>
                    <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?>
<!DOCTYPE paula SYSTEM "paula_struct.dtd">
<paula version="0.9">
	<header paula_id="doc1.anno"/>
	<structList xmlns:xlink="http://www.w3.org/1999/xlink" type="annoSet" >
		<struct id="anno_0">
			<rel id="rel_1" xlink:href="doc1.text.xml" />
		</struct>
		<struct id="anno_1">
			<rel id="rel_2" xlink:href="morphology.doc1.tok.xml" />
			<rel id="rel_3" xlink:href="morphology.doc1.tok_saltSemantics.POS.xml" />
			<rel id="rel_4" xlink:href="morphology.doc1.tok_saltSemantics.LEMMA.xml" />
		</struct>
		<struct id="anno_2">
			<rel id="rel_5" xlink:href="syntax.doc1.struct_const.xml" />
			<rel id="rel_6" xlink:href="syntax.doc1.struct.xml" />
		</struct>
		<struct id="anno_3">
			<rel id="rel_7" xlink:href="nolayer.doc1.pointRel_anaphoric.xml" />
			<rel id="rel_8" xlink:href="nolayer.doc1.mark.xml" />
			<rel id="rel_9" xlink:href="nolayer.doc1.mark_Inf-Struct.xml" />
			<rel id="rel_10" xlink:href="nolayer.doc1.tok.xml" />
		</struct>
	</structList>
</paula>
]]>
				</programlisting>
                </example>
            </para>
            <para> As you can see, the annotation set file is compliant to
                    <emphasis>paula_struct.dtd</emphasis> and consists of four
                    <markup>&lt;struct&gt;</markup> tags while the annotation set feat file contains
                four <markup>&lt;feat&gt;</markup> tags (and is compliant to
                    <emphasis>paula_feat.dtd</emphasis>). </para>
            <para>
                <example xml:id="exporter_annoFeatFile">
                    <title>doc1.anno_feat.xml</title>
                    <programlisting>
<![CDATA[
<?xml version="1.0" standalone="no"?>
<!DOCTYPE paula SYSTEM "paula_feat.dtd">
<paula version="0.9">
	<header paula_id="doc1.anno_feat"/>
	<featList xmlns:xlink="http://www.w3.org/1999/xlink" type="annoFeat" >
		<feat xlink:href="#anno_0" value="doc1" />
		<feat xlink:href="#anno_1" value="morphology" />
		<feat xlink:href="#anno_2" value="syntax" />
		<feat xlink:href="#anno_3" value="nolayer" />
	</featList>
</paula>
]]>
				</programlisting>
                </example>
            </para>
            <para> 
                Each <markup>&lt;struct></markup> tag included in <emphasis>doc1.anno.xml</emphasis> 
                contains all files in the layer with <markup>@id</markup> <emphasis>anno_X</emphasis> where the layer 
                name is noted in one
                    <markup>&lt;feat&gt;</markup> tag in the file <emphasis>doc1.anno_feat.xml</emphasis>. 
                For Example, the layer <emphasis role="bold">morphology</emphasis> (<emphasis>anno_1</emphasis>) contains 
                the files <emphasis>morphology.doc1.tok.xml</emphasis>,
                <emphasis>morphology.doc1.tok_pos.xml</emphasis> and
                <emphasis>morphology.doc1.tok_lemma.xml</emphasis> where the first file is the
                file containing the tokenization of the textual datasource and the other two files
                are the annotation files to the token file. 
                <note>
                    <para> The struct tag with <markup>@id</markup> <emphasis>anno_0</emphasis> is no real layer (and is omitted iff every
                        textual datasource is in a layer) but the document itself and thus, the
                        value in <emphasis>doc1.anno_feat.xml</emphasis> for <emphasis>anno_0</emphasis> is the document
                        name.
                    </para>
                </note>
            </para>
        </sect1>
        <sect1>
            <title>Mapping of Layers</title>
            <para>
                All <classname>SLayer</classname> objects are mapped into PAULA-XML format by creating 
                token files, structure files, span files, datasource files and pointing relation files.
                All token being in the same layer are mapped in the same token file and the same holds
                for spans from the same layer.
                Thus, if two spans are located in different layers, they will be mapped into different
                files, too. To have a consistent output, all Salt objects which have no declared layer
                get a default layer named "nolayer".
            </para>
            <para>
                Keep in mind that there may be layers in which no token exist and there may be
                token which are in no layer at all. 
                <xref linkend="namingConventionsPAULA"/> shows the naming conventions for the above described files, in particular token, structure, span, pointing relation and annotation files, the type attribute and the underlying DTD files.
                For the sake of completeness, the table also contains the textual data sources.
                The square brackets symbolize parts which are only existent in following cases:
                <orderedlist>
                    <listitem>
                        <para>
                        There is more than one data source (the data source number, <emphasis>DSNo</emphasis>, 
                        is appended to the data source file (and the token file which references 
                        the data source)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        A data source is in a layer (the layer name is set as prefix)
                        </para>
                    </listitem>
                </orderedlist>
            </para>
            <para>
                <table frame="all" xml:id="namingConventionsPAULA">
                    <title>Naming conventions for PAULA files</title>
                    <tgroup cols="5" align="left" colsep="1" rowsep="1">
                        <colspec colname="c1" colwidth="1.12*"/>
                        <colspec colname="c2" colwidth="1.19*"/>
                        <colspec colname="c3" colwidth="1.92*"/>
                        <colspec colnum="4" colname="c4" colwidth="2.04*"/>
                        <colspec colnum="5" colname="c5" colwidth="1*"/>
                        <thead>
                            <row>
                                <entry/>
                                <entry>Salt Object</entry>
                                <entry>Basename/paulaID</entry>
                                <entry>type</entry>
                                <entry>DTD file type</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><emphasis role="bold">Text</emphasis></entry>
                                <entry>STextualDS</entry>
                                <entry>[LN.]DN.type[.DSN]</entry>
                                <entry>text</entry>
                                <entry>text</entry>
                            </row>
                            <row>
                                <entry><emphasis role="bold">Token</emphasis></entry>
                                <entry>SToken</entry>
                                <entry>LN.DN.type[.DSN]</entry>
                                <entry>tok</entry>
                                <entry morerows="1" align="left" valign="middle">mark</entry>
                            </row>
                            <row>
                                <entry><emphasis role="bold">Span</emphasis></entry>
                                <entry>SSpan</entry>
                                <entry align="left" morerows="1" valign="middle">LN.DN.type</entry>
                                <entry>mark</entry>
                            </row>
                            <row>
                                <entry><emphasis role="bold">Structure</emphasis></entry>
                                <entry>SStructure</entry>
                                <entry>struct</entry>
                                <entry>struct</entry>
                            </row>
                            <row>
                                <entry align="left" morerows="1" valign="bottom">
                                    <emphasis role="bold">Pointing Relation</emphasis></entry>
                                <entry align="left" morerows="1" valign="bottom">SPointing
                                    Relation</entry>
                                <entry align="left" morerows="1" valign="middle">
                                    LN.DN.pointRel_type </entry>
                                <entry>dep</entry>
                                <entry align="left" valign="middle" morerows="1">rel</entry>
                            </row>
                            <row>
                                <entry>anaphor_antecedent</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                
            </para>
            <para>
                At the same time, the PAULAExporter creates annotation files for the token, span, 
                structure and pointing relation, which have a filename of the form 
                <emphasis role="bold">Basename_AnnotationName.xml</emphasis> and are valid to
                <emphasis>paula_feat.dtd</emphasis>.
            </para>
            <para>
                The parts of the basename are layer name (LN), document name (DN), type and the optional
                data source number (DSN).
            </para>
        </sect1>
    </chapter>
</book>
